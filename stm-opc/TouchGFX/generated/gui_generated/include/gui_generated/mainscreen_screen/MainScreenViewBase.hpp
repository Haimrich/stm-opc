/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINSCREENVIEWBASE_HPP
#define MAINSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/widgets/graph/GraphScroll.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/AnimatedImage.hpp>
#include <gui/containers/ConsoleContainer.hpp>
#include <touchgfx/mixins/ClickListener.hpp>

class MainScreenViewBase : public touchgfx::View<MainScreenPresenter>
{
public:
    MainScreenViewBase();
    virtual ~MainScreenViewBase() {}
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box backgroundBox;
    touchgfx::Image pipe7;
    touchgfx::Image pipe6;
    touchgfx::Image pipe5;
    touchgfx::Image pipe4;
    touchgfx::Image pipe3;
    touchgfx::Image pipe2;
    touchgfx::Image pipe1;
    touchgfx::ClickListener< touchgfx::Image > pump;
    touchgfx::ClickListener< touchgfx::Image > valve;
    touchgfx::BoxProgress boiler;
    touchgfx::GraphScroll<60> boilerGraph;
    touchgfx::GraphElementLine boilerGraphLine1;
    touchgfx::PainterRGB565 boilerGraphLine1Painter;
    touchgfx::BoxProgress mainTank;
    touchgfx::GraphScroll<60> mainTankGraph;
    touchgfx::GraphElementLine mainTankGraphLine1;
    touchgfx::PainterRGB565 mainTankGraphLine1Painter;
    touchgfx::TextArea mainTankText;
    touchgfx::TextArea waterSourceText1;
    touchgfx::TextArea waterSourceText2;
    touchgfx::TextArea boilerText;
    touchgfx::TextAreaWithOneWildcard mainTankTempText;
    touchgfx::Image mainTankTempIcon;
    touchgfx::Image boilerTempIcon;
    touchgfx::TextAreaWithOneWildcard boilerTempText;
    touchgfx::TextAreaWithOneWildcard pressureText;
    touchgfx::Image gaugePart;
    touchgfx::Gauge pressureGauge;
    touchgfx::PainterRGB565 pressureGaugePainter;
    touchgfx::Image turbine;
    touchgfx::TextAreaWithOneWildcard energyText;
    touchgfx::Image energyIcon;
    touchgfx::TextArea turbineText;
    touchgfx::AnimatedImage turbineHead;
    touchgfx::Image logosImage;
    ConsoleContainer console;
    touchgfx::ClickListener< touchgfx::Image > fire;
    touchgfx::Image processorIcon;
    touchgfx::Image image1;
    touchgfx::Image image2;
    touchgfx::TextAreaWithOneWildcard dateText;
    touchgfx::TextAreaWithOneWildcard clockText;
    touchgfx::TextAreaWithOneWildcard cpuUsageText;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MAINTANKTEMPTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar mainTankTempTextBuffer[MAINTANKTEMPTEXT_SIZE];
    static const uint16_t BOILERTEMPTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar boilerTempTextBuffer[BOILERTEMPTEXT_SIZE];
    static const uint16_t PRESSURETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar pressureTextBuffer[PRESSURETEXT_SIZE];
    static const uint16_t ENERGYTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar energyTextBuffer[ENERGYTEXT_SIZE];
    static const uint16_t DATETEXT_SIZE = 12;
    touchgfx::Unicode::UnicodeChar dateTextBuffer[DATETEXT_SIZE];
    static const uint16_t CLOCKTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar clockTextBuffer[CLOCKTEXT_SIZE];
    static const uint16_t CPUUSAGETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar cpuUsageTextBuffer[CPUUSAGETEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MAINSCREENVIEWBASE_HPP
