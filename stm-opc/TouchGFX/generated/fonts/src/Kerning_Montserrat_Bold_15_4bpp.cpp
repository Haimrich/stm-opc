#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_Montserrat_Bold_15_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0025, -2 },  // (First char = [0x0025, percent], Second char = [0x0025, percent], Kerning dist = -2)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0025, percent], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x002E, period], Kerning dist = -1)
    { 0x003F, -1 },  // (First char = [0x003F, question], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00B0, -1 },  // (First char = [0x00B0, degree], Second char = [0x002E, period], Kerning dist = -1)
    { 0x002E,  1 },  // (First char = [0x002E, period], Second char = [0x002F, slash], Kerning dist = 1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x003A,  1 },  // (First char = [0x003A, colon], Second char = [0x002F, slash], Kerning dist = 1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x00B0, -1 },  // (First char = [0x00B0, degree], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x0054,  1 },  // (First char = [0x0054, T], Second char = [0x0031, one], Kerning dist = 1)
    { 0x00B0,  1 },  // (First char = [0x00B0, degree], Second char = [0x0031, one], Kerning dist = 1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0034, four], Kerning dist = -1)
    { 0x003F, -1 },  // (First char = [0x003F, question], Second char = [0x0034, four], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00B0, -1 },  // (First char = [0x00B0, degree], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00B0,  1 },  // (First char = [0x00B0, degree], Second char = [0x0037, seven], Kerning dist = 1)
    { 0x00B0,  1 },  // (First char = [0x00B0, degree], Second char = [0x0039, nine], Kerning dist = 1)
    { 0x0025, -1 },  // (First char = [0x0025, percent], Second char = [0x003F, question], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x003F, question], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x003F, question], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x003F, question], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0054, T], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00B0,  1 },  // (First char = [0x00B0, degree], Second char = [0x0054, T], Kerning dist = 1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0057, W], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0057, W], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0061, a], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0063, c], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006E, n], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0072, r], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0073, s], Kerning dist = -1)
    { 0x006C,  1 },  // (First char = [0x006C, l], Second char = [0x0074, t], Kerning dist = 1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0075, u], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x00B0, degree], Kerning dist = -1)
    { 0x002F,  1 },  // (First char = [0x002F, slash], Second char = [0x00B0, degree], Kerning dist = 1)
    { 0x0054,  1 },  // (First char = [0x0054, T], Second char = [0x00B0, degree], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x00B0, degree], Kerning dist = 1)
};
